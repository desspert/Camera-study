  MainCamera.cpp
  NOTE: Use of this header (bool_trait_def.hpp) is deprecated
  NOTE: Use of this header (template_arity_spec.hpp) is deprecated
  NOTE: Use of this header (template_arity_spec.hpp) is deprecated
c:\users\vantan\documents\github\camera-study\src\maincamera.h(24): warning C4244: '=': conversion from 'double' to 'float', possible loss of data
c:\users\vantan\documents\github\camera-study\src\maincamera.cpp(24): warning C4244: 'argument': conversion from 'double' to 'float', possible loss of data
c:\users\vantan\documents\github\camera-study\src\maincamera.cpp(27): warning C4244: '+=': conversion from 'double' to 'float', possible loss of data
c:\users\vantan\documents\github\camera-study\src\maincamera.cpp(28): warning C4244: '-=': conversion from 'double' to 'float', possible loss of data
c:\users\vantan\documents\github\camera-study\src\maincamera.cpp(31): warning C4244: 'argument': conversion from 'double' to 'float', possible loss of data
c:\users\vantan\documents\github\camera-study\src\maincamera.cpp(34): warning C4244: '-=': conversion from 'double' to 'float', possible loss of data
c:\users\vantan\documents\github\camera-study\src\maincamera.cpp(35): warning C4244: '+=': conversion from 'double' to 'float', possible loss of data
c:\users\vantan\documents\github\cinder_0.8.6_vs2015\include\cinder\vector.h(1296): warning C4244: 'argument': conversion from 'double' to 'float', possible loss of data
  c:\users\vantan\documents\github\camera-study\src\maincamera.h(21): note: see reference to function template instantiation 'cinder::Vec2<float> cinder::operator *<float,double>(const cinder::Vec2<float> &,Y)' being compiled
          with
          [
              Y=double
          ]
c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory(349): warning C4996: 'std::_Uninitialized_copy0': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
  c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory(336): note: see declaration of 'std::_Uninitialized_copy0'
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(191): note: see reference to function template instantiation '_FwdIt std::uninitialized_copy<I,boost::shared_ptr<void>*>(_InIt,_InIt,_FwdIt)' being compiled
          with
          [
              _FwdIt=boost::shared_ptr<void> *,
              I=boost::shared_ptr<void> *,
              _InIt=boost::shared_ptr<void> *
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(178): note: see reference to function template instantiation 'void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>::copy_rai<I,false>(I,I,boost::shared_ptr<void> *,const boost::integral_constant<bool,false> &)' being compiled
          with
          [
              T=boost::shared_ptr<void>,
              I=boost::shared_ptr<void> *
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(178): note: see reference to function template instantiation 'void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>::copy_rai<I,false>(I,I,boost::shared_ptr<void> *,const boost::integral_constant<bool,false> &)' being compiled
          with
          [
              T=boost::shared_ptr<void>,
              I=boost::shared_ptr<void> *
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(204): note: see reference to function template instantiation 'void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>::copy_impl<I>(I,I,boost::shared_ptr<void> *,std::random_access_iterator_tag)' being compiled
          with
          [
              T=boost::shared_ptr<void>,
              I=boost::shared_ptr<void> *
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(203): note: see reference to function template instantiation 'void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>::copy_impl<I>(I,I,boost::shared_ptr<void> *,std::random_access_iterator_tag)' being compiled
          with
          [
              T=boost::shared_ptr<void>,
              I=boost::shared_ptr<void> *
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(296): note: see reference to function template instantiation 'void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>::copy_impl<boost::shared_ptr<void>*>(I,I,boost::shared_ptr<void> *)' being compiled
          with
          [
              T=boost::shared_ptr<void>,
              I=boost::shared_ptr<void> *
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(296): note: see reference to function template instantiation 'void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>::copy_impl<boost::shared_ptr<void>*>(I,I,boost::shared_ptr<void> *)' being compiled
          with
          [
              T=boost::shared_ptr<void>,
              I=boost::shared_ptr<void> *
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(294): note: while compiling class template member function 'boost::shared_ptr<void> *boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>::move_to_new_buffer(unsigned int,const boost::true_type &)'
          with
          [
              T=boost::shared_ptr<void>
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\detail\auto_buffer.hpp(302): note: see reference to function template instantiation 'boost::shared_ptr<void> *boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>::move_to_new_buffer(unsigned int,const boost::true_type &)' being compiled
          with
          [
              T=boost::shared_ptr<void>
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\connection.hpp(53): note: see reference to class template instantiation 'boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10>,boost::signals2::detail::default_grow_policy,std::allocator<T>>' being compiled
          with
          [
              T=boost::shared_ptr<void>
          ]
  c:\users\vantan\documents\github\cinder_0.8.6_vs2015\boost\boost\signals2\connection.hpp(55): note: see reference to class template instantiation 'boost::signals2::detail::garbage_collecting_lock<Mutex>' being compiled
  TestProject.vcxproj -> C:\Users\vantan\Documents\GitHub\Camera-study\vc2013\Debug\TestProject.exe
